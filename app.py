import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
st.title("Analisis de TCR, TURISMO e IMPORTACIONES.")
st.markdown("*Realizado por Nicol√°s Marcelo Toniolo*")
st.set_page_config(page_title="TCR y Turismo", layout="wide")

st.header("üìä Tipo de Cambio Real Bilateral y Saldo Tur√≠stico")


st.markdown("""
En este apartado nos proponemos analizar la evoluci√≥n del tipo de cambio real bilateral entre Argentina y Brasil y explorar su posible relaci√≥n con el saldo tur√≠stico de Argentina. El objetivo es comprender si las variaciones en la competitividad cambiaria influyen en los flujos tur√≠sticos.
Para ello, se utilizar√°n datos provenientes de fuentes oficiales como el INDEC (Instituto Nacional de Estad√≠stica y Censos de Argentina), el IBGE (Instituto Brasile√±o de Geograf√≠a y Estad√≠stica), entre otros organismos nacionales e internacionales.
""")

# --- URLs desde GitHub ---
BASE_URL = "https://raw.githubusercontent.com/NMTES/econ/main/streamlit_data/"

url_br = BASE_URL + "brasil.csv"
url_ar = BASE_URL + "serie_ipc_divisiones.csv"
url_blue = BASE_URL + "usd_ars_blue.csv"
url_brl = BASE_URL + "usd-brl.csv"
url_turismo = BASE_URL + "serie_turismo_receptivo_emisivo.xlsx"
url_importaciones = BASE_URL + "serie_mensual_indices_impo_ue.xls"
url_emae = BASE_URL + "sh_emae_mensual_base2004.xls"

try:
    # Inflaci√≥n Brasil
    df_br = pd.read_csv(url_br, skiprows=3)
    df_brasil = df_br[df_br.iloc[:, 0] == "Brasil"]
    fechas_str = df_brasil.columns[1:]
    valores = df_brasil.values[0][1:]
    ipca_br = pd.DataFrame({"Fecha": fechas_str, "Infl_BR": valores})
    ipca_br['Infl_BR'] = ipca_br['Infl_BR'].astype(str).str.replace(',', '.').astype(float)
    meses = {'janeiro': '01', 'fevereiro': '02', 'mar√ßo': '03', 'abril': '04',
             'maio': '05', 'junho': '06', 'julho': '07', 'agosto': '08',
             'setembro': '09', 'outubro': '10', 'novembro': '11', 'dezembro': '12'}
    ipca_br[['Mes', 'A√±o']] = ipca_br['Fecha'].str.extract(r'(\w+)\s+(\d{4})')
    ipca_br['Mes'] = ipca_br['Mes'].map(meses)
    ipca_br['Fecha'] = pd.to_datetime(ipca_br['A√±o'] + '-' + ipca_br['Mes'] + '-01')
    ipca_br = ipca_br[ipca_br['Fecha'] >= '2019-01-01'][['Fecha', 'Infl_BR']]

    # Inflaci√≥n Argentina
    df_ar = pd.read_csv(url_ar, sep=';', encoding='latin1')
    ipc_ar = df_ar[(df_ar['Descripcion'] == 'NIVEL GENERAL') & (df_ar['Region'] == 'Nacional')].copy()
    ipc_ar['Fecha'] = pd.to_datetime(ipc_ar['Periodo'], format='%Y%m')
    ipc_ar['Infl_AR'] = ipc_ar['v_m_IPC'].str.replace(',', '.').astype(float)
    ipc_ar = ipc_ar[['Fecha', 'Infl_AR']]

    # Merge inflaciones
    df_comb = pd.merge(ipca_br, ipc_ar, on='Fecha', how='inner')

    # Blue
    df_ars = pd.read_csv(url_blue)
    df_ars['Fecha'] = pd.to_datetime(df_ars['category'])
    df_ars['valor'] = df_ars['valor'].astype(float)
    df_ars['Mes'] = df_ars['Fecha'].dt.to_period('M')
    blue_mensual = df_ars.sort_values('Fecha').groupby('Mes').tail(1).copy()
    blue_mensual['Fecha'] = blue_mensual['Mes'].dt.to_timestamp()
    blue_mensual = blue_mensual[['Fecha', 'valor']].rename(columns={'valor': 'ARS_USD_Blue'})

    # BRL
    df_brl = pd.read_csv(url_brl)
    df_brl['Fecha'] = pd.to_datetime(df_brl['Fecha'], format='%d.%m.%Y')
    df_brl['USD_BRL'] = df_brl['√öltimo'].str.replace('.', '', regex=False).str.replace(',', '.', regex=False).astype(float)
    df_brl = df_brl[['Fecha', 'USD_BRL']].sort_values('Fecha')

    # Tipo de cambio real
    df_tcr = df_comb.merge(blue_mensual, on='Fecha', how='inner').merge(df_brl, on='Fecha', how='inner')
    df_tcr['TC_nominal_ARS_BRL'] = df_tcr['ARS_USD_Blue'] / df_tcr['USD_BRL']
    df_tcr['TCR_bruto'] = df_tcr['TC_nominal_ARS_BRL'] * df_tcr['Infl_BR'] / df_tcr['Infl_AR']
    valor_base = df_tcr.loc[df_tcr['Fecha'] == '2019-01-01', 'TCR_bruto'].values[0]
    df_tcr['TCR_indice'] = df_tcr['TCR_bruto'] / valor_base * 100
    df_tcr['IPC_AR_idx'] = (1 + df_tcr['Infl_AR'] / 100).cumprod() * 100
    df_tcr['IPC_BR_idx'] = (1 + df_tcr['Infl_BR'] / 100).cumprod() * 100
    df_tcr['TCR'] = df_tcr['TC_nominal_ARS_BRL'] * df_tcr['IPC_BR_idx'] / df_tcr['IPC_AR_idx']
    tcr_base = df_tcr.loc[df_tcr['Fecha'] == '2019-01-01', 'TCR'].values[0]
    df_tcr['TCR_indice'] = df_tcr['TCR'] / tcr_base * 100

    # --- GRAFICO TCR ---
    st.subheader("üìà √çndice del Tipo de Cambio Real Bilateral")
    fig1, ax1 = plt.subplots(figsize=(12, 5))
    ax1.plot(df_tcr['Fecha'], df_tcr['TCR_indice'], label="TCR Bilateral", color="blue")
    ax1.set_title("√çndice del Tipo de Cambio Real Bilateral (Argentina - Brasil)")
    ax1.set_ylabel("√çndice (Base Ene-2019 = 100)")
    ax1.grid(True)
    fig1.tight_layout()
    st.pyplot(fig1)

    st.markdown("""
    Este gr√°fico muestra la evoluci√≥n del Tipo de Cambio Real (TCR) bilateral entre Argentina y Brasil, con base enero 2019 = 100. Cuanto m√°s alto es este √≠ndice, m√°s competitiva se vuelve Argentina respecto a Brasil (es decir, los precios argentinos son m√°s bajos en relaci√≥n a los brasile√±os, facilitando las exportaciones y atrayendo turismo). Cuando el TCR cae, como a fines de 2023 y en 2024, Argentina se vuelve m√°s cara en t√©rminos relativos, lo cual podr√≠a desalentar el turismo receptivo desde Brasil.""")

    # --- TURISMO ---
    df = pd.read_excel(url_turismo, header=2, engine="openpyxl")
    df.columns = ["A√±o", "Fecha", "Receptivo", "Emisivo", "Saldo"]
    df = df[df["Fecha"].notna()].copy()
    df = df[df["Fecha"] >= "2019-01-01"]
    df["Fecha"] = df["Fecha"].dt.to_period("M").dt.to_timestamp()
    df["Saldo"] = pd.to_numeric(df["Saldo"], errors="coerce")
    df_tcr["Fecha"] = pd.to_datetime(df_tcr["Fecha"]).dt.to_period("M").dt.to_timestamp()

    df_completo = pd.merge(df_tcr[["Fecha", "TCR_indice"]], df[["Fecha", "Saldo"]], on="Fecha", how="inner").dropna()
    df_completo["FechaNum"] = mdates.date2num(df_completo["Fecha"])

    # Regresiones
    X = df_completo["FechaNum"].values.reshape(-1, 1)
    y_tcr = df_completo["TCR_indice"].values
    y_saldo = df_completo["Saldo"].values
    reg_tcr = LinearRegression().fit(X, y_tcr)
    reg_saldo = LinearRegression().fit(X, y_saldo)

    # GRAFICO TCR vs Turismo
    st.subheader("üåç TCR vs Saldo Tur√≠stico")
    
    fig2, ax = plt.subplots(figsize=(12, 5))
    ax.plot(df_completo["Fecha"], df_completo["TCR_indice"], label="TCR Bilateral", color="blue")
    ax2 = ax.twinx()
    ax2.plot(df_completo["Fecha"], df_completo["Saldo"], label="Saldo Tur√≠stico", color="red", linestyle="--")
    ax.set_title("TCR Bilateral Argentina-Brasil vs Saldo Tur√≠stico")
    ax.set_ylabel("TCR (√çndice Ene-2019 = 100)", color="blue")
    ax2.set_ylabel("Saldo Tur√≠stico (miles de personas)", color="red")
    ax.grid(True)
    fig2.tight_layout()
    st.pyplot(fig2)

    st.markdown("""
    
    Este gr√°fico compara dos cosas distintas pero relacionadas:
    
    1. La **l√≠nea azul** muestra el **TCR** que ya explicamos antes (si Argentina est√° m√°s barata o m√°s cara que Brasil).
    2. La **l√≠nea roja** muestra el **saldo tur√≠stico**, que es la diferencia entre:
       - La cantidad de turistas que ingresan a Argentina.
       - Y la cantidad de argentinos que viajan al exterior.
    
    Si la l√≠nea roja est√° por debajo de cero, significa que **m√°s argentinos est√°n viajando a Brasil que brasile√±os viniendo a Argentina**.
    
    ---
    
    - Cuando el **TCR sube** (Argentina se vuelve m√°s barata), el saldo tur√≠stico mejora: vienen m√°s brasile√±os o viajan menos argentinos.
    - Cuando el **TCR baja** (Argentina se vuelve m√°s cara), el saldo tur√≠stico empeora: se van m√°s argentinos a Brasil y vienen menos turistas brasile√±os.
    
    Esto sugiere que **el precio relativo entre los dos pa√≠ses influye en las decisiones de viaje**.
    """)

    
    # --- Correlaci√≥n de Pearson ---
    st.markdown("### üìâ Coeficiente de correlaci√≥n y Regresion.")
    corr_pearson = df_completo[["TCR_indice", "Saldo"]].corr().iloc[0, 1]
    st.write(f"**Coeficiente de correlaci√≥n:** {corr_pearson:.3f}")
    # Regresi√≥n entre TCR y saldo tur√≠stico
    X_tcr = df_completo[["TCR_indice"]].values
    y = df_completo["Saldo"].values
    model = LinearRegression()
    model.fit(X_tcr, y)
    y_pred = model.predict(X_tcr)
    r2 = r2_score(y, y_pred)
    rmse = np.sqrt(mean_squared_error(y, y_pred))
    st.write(f"**Coeficiente:** {model.coef_[0]:.4f}")
    st.write(f"**Intercepto:** {model.intercept_:.4f}")
    st.write(f"**R¬≤:** {r2:.3f}")
    st.write(f"**RMSE:** {rmse:.2f}")

    st.markdown("""
    Hicimos algunos c√°lculos para ver si esta relaci√≥n es real:
    
    - **Correlaci√≥n:** 0.555 ‚Üí Hay una relaci√≥n moderada: cuando el TCR sube, el saldo tur√≠stico mejora.
    - **Regresi√≥n:**  
      Usamos una f√≥rmula matem√°tica para ver c√≥mo el TCR afecta al saldo tur√≠stico:
      > Saldo = 5122 √ó TCR ‚àí 792880  
      Esto significa que por cada punto que sube el TCR, el saldo mejora.
    - **R¬≤ = 0.308:** Esto quiere decir que un 30% de los cambios en el saldo tur√≠stico pueden explicarse por el TCR.
    - **Error (RMSE):** 216.850 ‚Üí El modelo no es perfecto, pero ayuda a ver una tendencia general.""")
    
    
    fig3, ax = plt.subplots(figsize=(6, 6))
    ax.scatter(X_tcr, y, label="Datos", alpha=0.6)
    ax.plot(X_tcr, y_pred, color="black", label="Regresi√≥n")
    ax.set_xlabel("TCR Bilateral (√çndice)")
    ax.set_ylabel("Saldo tur√≠stico")
    ax.set_title("Regresi√≥n lineal")
    ax.grid(True)
    st.pyplot(fig3)
    
    st.markdown("""
    
    El gr√°fico confirma que el **Tipo de Cambio Real** tiene una **influencia importante** en el turismo, aunque no es el √∫nico factor.  
    El modelo ayuda a visualizar una tendencia clara: **precios m√°s competitivos traen m√°s turistas**.
    """)


    st.header("üìä Importaciones y Estimador Mensual de Actividad Econ√≥mica (EMAE)")
    df_raw = pd.read_excel(url_importaciones, header=1, engine="xlrd")

    categorias = [
        "Nivel general", "Bienes de capital", "Bienes intermedios",
        "Combustibles y lubricantes", "Piezas y accesorios para bienes de capital",
        "Bienes de consumo", "Veh√≠culos automotores de pasajeros"
    ]

    columnas = ["A√±o", "Mes"]
    for categoria in categorias:
        columnas += [f"{categoria} - Valor", f"{categoria} - Precio", f"{categoria} - Cantidad", f"{categoria} - Extra"]
    df_raw.columns = columnas[:len(df_raw.columns)]

    meses_validos = [
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    ]
    df_raw["Mes"] = df_raw["Mes"].astype(str).str.strip().str.capitalize()
    df_raw = df_raw[df_raw["Mes"].isin(meses_validos)].copy()

    a√±o_actual = None
    a√±os = []
    for val in df_raw["A√±o"]:
        val_str = str(val).strip()
        posible_a√±o = ''.join(filter(str.isdigit, val_str))
        if posible_a√±o.isdigit():
            a√±o_actual = int(posible_a√±o)
        a√±os.append(a√±o_actual)
    df_raw["A√±o"] = a√±os

    df_raw["Mes_num"] = df_raw["Mes"].apply(lambda x: meses_validos.index(x) + 1)
    df_raw["Fecha"] = pd.to_datetime(dict(year=df_raw["A√±o"], month=df_raw["Mes_num"], day=1))

    # --- Extraccion y desestacionalizaci√≥n ---
    df = pd.DataFrame()
    df["Fecha"] = df_raw["Fecha"]
    df["Piezas_Cantidad"] = pd.to_numeric(df_raw["Piezas y accesorios para bienes de capital - Cantidad"], errors="coerce")
    df["Consumo_Cantidad"] = pd.to_numeric(df_raw["Bienes de consumo - Cantidad"], errors="coerce")
    df["A√±o"] = df["Fecha"].dt.year
    df["Mes"] = df["Fecha"].dt.month

    prom_anual = df.groupby("A√±o")[["Piezas_Cantidad", "Consumo_Cantidad"]].transform("mean")
    df["Piezas_Proxy"] = df["Piezas_Cantidad"] / prom_anual["Piezas_Cantidad"]
    df["Consumo_Proxy"] = df["Consumo_Cantidad"] / prom_anual["Consumo_Cantidad"]

    coef = df.groupby("Mes")[["Piezas_Proxy", "Consumo_Proxy"]].mean().reset_index()
    df = df.merge(coef, on="Mes", suffixes=("", "_coef"))
    df["Piezas_Desest"] = df["Piezas_Cantidad"] / df["Piezas_Proxy_coef"]
    df["Consumo_Desest"] = df["Consumo_Cantidad"] / df["Consumo_Proxy_coef"]
    df["Var_Piezas_Desest"] = df["Piezas_Desest"].pct_change(fill_method=None) * 100
    df["Var_Consumo_Desest"] = df["Consumo_Desest"].pct_change(fill_method=None) * 100

    # --- Gr√°fico desestacionalizado ---
    fig1, ax1 = plt.subplots(figsize=(10, 4))
    ax1.plot(df["Fecha"], df["Piezas_Desest"], label="Piezas Desestacionalizadas")
    ax1.plot(df["Fecha"], df["Consumo_Desest"], label="Consumo Desestacionalizado")
    ax1.set_title("√çndices Desestacionalizados (2004-2025)")
    ax1.legend()
    ax1.grid(True)
    st.pyplot(fig1)

    st.markdown("""
    Se puede observar:
    Ambas l√≠neas tienden a subir cuando la econom√≠a crece y a caer en per√≠odos de crisis (por ejemplo, en 2009, 2018 y 2020).  
    Las importaciones de piezas muestran una respuesta m√°s fuerte a los ciclos econ√≥micos, lo que sugiere que est√°n ligadas a la producci√≥n.
    """)

    # --- EMAE ---
    df_emae = pd.read_excel(url_emae, skiprows=3, header=None, engine="xlrd")
    df_emae.columns = ["A√±o", "Mes", "Serie_Original", "Var_anual", "EMAE_Desest", "Var_mensual_desest", "Tendencia_Ciclo", "Var_mensual_tendencia"]
    meses_dict = {m: i+1 for i, m in enumerate(meses_validos)}
    df_emae["Mes"] = df_emae["Mes"].astype(str).str.strip().str.capitalize()
    df_emae = df_emae[df_emae["Mes"].isin(meses_dict.keys())].copy()

    a√±o_actual = None
    a√±os = []
    for val in df_emae["A√±o"]:
        if pd.notna(val) and str(val).strip().isdigit():
            a√±o_actual = int(val)
        a√±os.append(a√±o_actual)
    df_emae["A√±o"] = a√±os
    df_emae["Mes_num"] = df_emae["Mes"].map(meses_dict)
    df_emae["Fecha"] = pd.to_datetime(dict(year=df_emae["A√±o"], month=df_emae["Mes_num"], day=1), errors='coerce')
    df_emae = df_emae[df_emae["Fecha"].notna()].sort_values("Fecha").reset_index(drop=True)
    df_merged = pd.merge(df, df_emae[["Fecha", "Var_mensual_desest"]], on="Fecha", how="inner")
    df_merged.rename(columns={"Var_mensual_desest": "Var_EMAE"}, inplace=True)
    corr_piezas = df_merged[["Var_Piezas_Desest", "Var_EMAE"]].corr().iloc[0, 1]
    corr_consumo = df_merged[["Var_Consumo_Desest", "Var_EMAE"]].corr().iloc[0, 1]
    
    # --- Gr√°fico de variaciones ---
    fig2, ax2 = plt.subplots(figsize=(10, 4))
    ax2.plot(df_merged["Fecha"], df_merged["Var_EMAE"], label="EMAE Œî%", color="black")
    ax2.plot(df_merged["Fecha"], df_merged["Var_Piezas_Desest"], label="Piezas Œî%")
    ax2.plot(df_merged["Fecha"], df_merged["Var_Consumo_Desest"], label="Consumo Œî%")
    ax2.set_title("Variaciones mensuales desestacionalizadas")
    ax2.axhline(0, color="gray")
    ax2.grid(True)
    ax2.legend()
    st.pyplot(fig2)

    st.markdown("""
    Este gr√°fico muestra c√≥mo cambian mes a mes las importaciones y el EMAE.  
    Aunque hay mucha variabilidad, se observa que cuando la econom√≠a sube, las importaciones tambi√©n tienden a subir, y viceversa.
    
    - Las importaciones tienden a acompa√±ar los ciclos econ√≥micos: crecen cuando la econom√≠a crece y caen cuando hay recesi√≥n.
    - Las importaciones de **piezas** reaccionan con m√°s fuerza y podr√≠an usarse como **indicador temprano de actividad industrial**.
    - Las importaciones de consumo tambi√©n siguen la actividad, pero de forma un poco m√°s dispersa.
    """)

    df_cleaned = df_merged.dropna(subset=["Var_EMAE", "Var_Piezas_Desest", "Var_Consumo_Desest"]).copy()

    # Regresi√≥n para Piezas
    X_piezas = df_cleaned[["Var_EMAE"]].values
    y_piezas = df_cleaned["Var_Piezas_Desest"].values
    modelo_piezas = LinearRegression().fit(X_piezas, y_piezas)

    coef_piezas = modelo_piezas.coef_[0]
    intercepto_piezas = modelo_piezas.intercept_

    # Regresi√≥n para Consumo
    X_consumo = df_cleaned[["Var_EMAE"]].values
    y_consumo = df_cleaned["Var_Consumo_Desest"].values
    modelo_consumo = LinearRegression().fit(X_consumo, y_consumo)

    coef_consumo = modelo_consumo.coef_[0]
    intercepto_consumo = modelo_consumo.intercept_

    # --- Gr√°fico de regresi√≥n ---
    fig3, ax3 = plt.subplots(figsize=(5, 5))
    ax3.scatter(X_piezas, y_piezas, alpha=0.7, label="Datos")
    x_vals = np.linspace(X_piezas.min(), X_piezas.max(), 100)
    y_pred = coef_piezas * x_vals + intercepto_piezas
    ax3.plot(x_vals, y_pred, color="black", label="Recta de regresi√≥n")
    ax3.set_title("Regresi√≥n: Piezas Œî% vs EMAE Œî%")
    ax3.set_xlabel("EMAE Œî%")
    ax3.set_ylabel("Piezas Œî%")
    ax3.grid(True)
    st.pyplot(fig3)
    
    fig4, ax4 = plt.subplots(figsize=(5, 5))
    ax4.scatter(X_consumo, y_consumo, alpha=0.7, label="Datos")
    x_vals = np.linspace(X_consumo.min(), X_consumo.max(), 100)
    y_pred = coef_consumo * x_vals + intercepto_consumo
    ax4.plot(x_vals, y_pred, color="black", label="Recta de regresi√≥n")
    ax4.set_title("Regresi√≥n: Bienes de consumo Œî% vs EMAE Œî%")
    ax4.set_xlabel("EMAE Œî%")
    ax4.set_ylabel("Bienes de consumo Œî%")
    ax4.grid(True)
    st.pyplot(fig4)

    # --- Indicadores ---
    st.write(f"üìä Correlaci√≥n mensual (Piezas vs EMAE): {corr_piezas:.3f}")
    st.write(f"üìä Correlaci√≥n mensual (Consumo vs EMAE): {corr_consumo:.3f}")

    st.markdown("""Esto significa que existe una **relaci√≥n positiva, aunque d√©bil, entre el nivel de actividad econ√≥mica y las importaciones**. En otras palabras, cuando la econom√≠a mejora ‚Äîaunque sea de forma moderada‚Äî, las empresas suelen aumentar sus compras de productos importados, especialmente de piezas que se utilizan como insumos o maquinaria para la producci√≥n. Lo mismo ocurre, aunque en menor medida, con los bienes de consumo.
    Sin embargo, la dispersi√≥n de los datos indica que **el EMAE no es el √∫nico factor que explica las importaciones**. Muchos puntos se alejan de la tendencia general, lo cual sugiere que tambi√©n influyen otros elementos como las restricciones comerciales, la evoluci√≥n del tipo de cambio, la pol√≠tica econ√≥mica, la disponibilidad de divisas o incluso las expectativas del sector privado.
    Por lo tanto, si bien puede decirse que las importaciones tienden a acompa√±ar el ciclo econ√≥mico ‚Äîcrecen en los per√≠odos de expansi√≥n y caen en las recesiones‚Äî, **la relaci√≥n est√° lejos de ser perfecta**, y no ser√≠a correcto pensar que se puede anticipar el comportamiento de las importaciones solo observando el EMAE.
    Estas correlaciones nos ayudan a entender que hay una conexi√≥n entre ambos fen√≥menos, pero tambi√©n nos recuerdan que la econom√≠a real es m√°s compleja y est√° influida por m√∫ltiples variables al mismo tiempo.
    """)

    # --- Gr√°fico anual ---
    df_merged["A√±o"] = df_merged["Fecha"].dt.year
    df_anual = df_merged.groupby("A√±o")[["Var_EMAE", "Var_Piezas_Desest", "Var_Consumo_Desest"]].mean().reset_index()
    corr_piezas_anual = df_anual[["Var_Piezas_Desest", "Var_EMAE"]].corr().iloc[0, 1]
    corr_consumo_anual = df_anual[["Var_Consumo_Desest", "Var_EMAE"]].corr().iloc[0, 1]
    fig5, ax5 = plt.subplots(figsize=(8, 4))
    ax5.plot(df_anual["A√±o"], df_anual["Var_EMAE"], label="EMAE Œî% anual", color="black")
    ax5.plot(df_anual["A√±o"], df_anual["Var_Piezas_Desest"], label="Piezas Œî% anual")
    ax5.plot(df_anual["A√±o"], df_anual["Var_Consumo_Desest"], label="Consumo Œî% anual")
    ax5.axhline(0, color="gray")
    ax5.grid(True)
    ax5.legend()
    ax5.set_title("Variaciones mensuales desestacionalizadas - promedio anual")
    st.pyplot(fig5)
    
    # --- Correlaci√≥n anual ---
    st.write(f"üìä Correlaci√≥n ANUAL (Piezas vs EMAE): {corr_piezas_anual:.3f}")
    st.write(f"üìä Correlaci√≥n ANUAL (Consumo vs EMAE): {corr_consumo_anual:.3f}")
    st.markdown("""¬øQu√© pasa cuando miramos el promedio por a√±o?
    En este gr√°fico observamos el **promedio anual de las variaciones mensuales** desestacionalizadas del EMAE (l√≠nea negra), las importaciones de piezas (l√≠nea azul) y las importaciones de bienes de consumo (l√≠nea naranja).
    Cuando pasamos de mirar datos mensuales a **promedios anuales**, notamos un cambio importante:  
    - La **correlaci√≥n entre piezas y EMAE sube a 0.628**
    - La **correlaci√≥n entre consumo y EMAE sube a 0.478**
    Esto se debe a que los datos mensuales suelen estar llenos de "ruido": peque√±os saltos, efectos estacionales residuales, shocks puntuales o decisiones empresariales que no reflejan tendencias reales.  
    Al promediar los datos por a√±o, ese ruido se reduce, y lo que queda es una **relaci√≥n m√°s clara entre la econom√≠a y las importaciones**.
    - En otras palabras: **cuando la econom√≠a crece sostenidamente a lo largo del a√±o, las importaciones tambi√©n lo hacen**.
    - Esto es especialmente evidente en el caso de las **importaciones de piezas**, que parecen seguir de cerca el ritmo del ciclo econ√≥mico.
    Este gr√°fico confirma que, aunque en el corto plazo (mes a mes) la relaci√≥n entre actividad e importaciones puede ser d√©bil o dispersa,  
    **a lo largo del tiempo la conexi√≥n se vuelve m√°s fuerte**: las importaciones tienden a acompa√±ar el crecimiento econ√≥mico de manera bastante consistente cuando se analiza en escala anual.
    Por eso, las correlaciones anuales m√°s altas no solo son estad√≠sticas: **nos dicen que las decisiones de importar responden a las condiciones econ√≥micas generales, no solo a movimientos puntuales**.
    """)

    # --- Repetimos el agrupamiento por a√±o si no est√° antes ---
    df_merged["A√±o"] = df_merged["Fecha"].dt.year
    df_anual = df_merged.groupby("A√±o")[["Var_EMAE", "Var_Piezas_Desest", "Var_Consumo_Desest"]].mean().reset_index()
    
    # --- Regresi√≥n EMAE vs Piezas ---
    X_piezas = sm.add_constant(df_anual["Var_EMAE"])
    y_piezas = df_anual["Var_Piezas_Desest"]
    modelo_piezas = sm.OLS(y_piezas, X_piezas).fit()
    
    # --- Regresi√≥n EMAE vs Consumo ---
    X_consumo = sm.add_constant(df_anual["Var_EMAE"])
    y_consumo = df_anual["Var_Consumo_Desest"]
    modelo_consumo = sm.OLS(y_consumo, X_consumo).fit()
    
    # --- Gr√°fico regresi√≥n Piezas ---
    fig6, ax6 = plt.subplots(figsize=(6, 5))
    sns.regplot(x="Var_EMAE", y="Var_Piezas_Desest", data=df_anual, ax=ax6, color="dodgerblue", line_kws={"color": "black"})
    ax6.set_title("üìà Regresi√≥n anual: Piezas Œî% vs EMAE Œî%")
    ax6.set_xlabel("EMAE Œî% promedio anual")
    ax6.set_ylabel("Piezas Œî% promedio anual")
    st.pyplot(fig6)
    
    # --- Gr√°fico regresi√≥n Consumo ---
    fig7, ax7 = plt.subplots(figsize=(6, 5))
    sns.regplot(x="Var_EMAE", y="Var_Consumo_Desest", data=df_anual, ax=ax7, color="darkorange", line_kws={"color": "black"})
    ax7.set_title("üìà Regresi√≥n anual: Consumo Œî% vs EMAE Œî%")
    ax7.set_xlabel("EMAE Œî% promedio anual")
    ax7.set_ylabel("Consumo Œî% promedio anual")
    st.pyplot(fig7)

except Exception as e:
    st.error(f"Ocurri√≥ un error al cargar los datos: {e}")
    st.info("üìå Verific√° que los archivos est√©n disponibles en la carpeta `streamlit_data` del repositorio.")
